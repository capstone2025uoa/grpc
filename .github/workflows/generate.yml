name: Generate and Test gRPC Stubs

on:
  push:
    paths:
      - 'proto/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      ##################################################
      # 1) CHECK OUT REPO
      ##################################################
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      ##################################################
      # 2) GENERATE PYTHON STUBS
      ##################################################
      # Note: We generate a simple __init__.py with explicit imports
      # instead of using dynamic imports to avoid issues with relative imports
      # when the package is installed as a dependency
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Python gRPC tools
        run: |
          pip install --upgrade pip
          pip install grpcio-tools

      - name: Create Python output directory
        run: mkdir -p ./generated/compsci399_grpc

      - name: Generate Python code
        run: |
          python -m grpc_tools.protoc \
            -I=./proto \
            --python_out=./generated/compsci399_grpc \
            --grpc_python_out=./generated/compsci399_grpc \
            ./proto/*.proto

      - name: Create simplified __init__.py
        run: |
          # Remove existing __init__.py if it exists
          rm -f ./generated/compsci399_grpc/__init__.py
          
          # Create a new __init__.py with explicit imports
          python -c '
          import os
          import glob

          init_content = "# Auto-generated explicit imports\n"
          
          # Get all proto files
          proto_files = glob.glob("./proto/*.proto")
          proto_base_names = [os.path.splitext(os.path.basename(f))[0] for f in proto_files]
          
          # Add explicit imports for each proto module
          for name in sorted(proto_base_names):
              init_content += f"from .{name}_pb2 import *\n"
              init_content += f"from .{name}_pb2_grpc import *\n"
          
          # Write the file
          with open("./generated/compsci399_grpc/__init__.py", "w") as f:
              f.write(init_content)
          
          print(f"Created __init__.py with imports for: {", ".join(proto_base_names)})")
          '

      - name: Fix Python gRPC imports
        run: |
          # Find and fix all *_pb2_grpc.py files to use relative imports
          python -c '
          import os
          import glob
          import re
          
          # Find all *_pb2_grpc.py files
          grpc_files = glob.glob("./generated/compsci399_grpc/*_pb2_grpc.py")
          
          for file_path in grpc_files:
              with open(file_path, "r") as f:
                  content = f.read()
              
              # Replace imports like "import X_pb2 as X__pb2" with "from . import X_pb2 as X__pb2"
              fixed_content = re.sub(
                  r"import (\w+_pb2) as (\w+__pb2)",
                  r"from . import \1 as \2",
                  content
              )
              
              # Write the file back
              with open(file_path, "w") as f:
                  f.write(fixed_content)
              
              print(f"Fixed imports in {os.path.basename(file_path)}")
          '

      ##################################################
      # 3) GENERATE NODE.JS / TYPESCRIPT STUBS
      ##################################################
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install Node dev dependencies
        run: |
          npm install --global grpc-tools @grpc/proto-loader ts-protoc-gen

      - name: Create Node output directory
        run: mkdir -p ./generated/node

      - name: Generate Node stubs
        run: |
          grpc_tools_node_protoc \
            --plugin=protoc-gen-ts=$(which protoc-gen-ts) \
            --js_out=import_style=commonjs,binary:./generated/node \
            --ts_out=./generated/node \
            -I=./proto \
            ./proto/*.proto

      ##################################################
      # 4) GENERATE C# STUBS
      ##################################################
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Protobuf compiler and C# gRPC tools
        id: install-tools
        run: |
          # Install protobuf compiler
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

          # Create a temporary project to install gRPC tools packages
          mkdir -p ./temp-project
          cd ./temp-project
          dotnet new console
          dotnet add package Grpc.Tools
          dotnet add package Google.Protobuf
          
          # Find the path to grpc_csharp_plugin in NuGet packages
          NUGET_DIR=~/.nuget/packages
          GRPC_TOOLS_VERSION=$(dotnet list package | grep Grpc.Tools | awk '{print $4}')
          TOOL_PATH="${NUGET_DIR}/grpc.tools/${GRPC_TOOLS_VERSION}/tools/linux_x64/grpc_csharp_plugin"
          
          if [ -f "$TOOL_PATH" ]; then
            echo "Found gRPC C# plugin at: $TOOL_PATH"
            chmod +x "$TOOL_PATH"
            # Set the output for other steps to use
            echo "plugin_path=$TOOL_PATH" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: Could not find grpc_csharp_plugin at expected path: $TOOL_PATH"
            echo "Searching for it in the NuGet packages directory..."
            find $NUGET_DIR -name "grpc_csharp_plugin" -type f
            exit 1
          fi
          
          cd ..

      - name: Create C# output directory
        run: mkdir -p ./generated/csharp

      - name: Generate C# code
        run: |
          protoc \
            --csharp_out=./generated/csharp \
            --grpc_out=./generated/csharp \
            --plugin=protoc-gen-grpc=${{ steps.install-tools.outputs.plugin_path }} \
            -I=./proto \
            ./proto/*.proto
          
          # Clean up temporary project
          rm -rf ./temp-project

      ##################################################
      # 5) PACKAGE AND PUBLISH C# CODE TO NUGET
      ##################################################
      - name: Create C# NuGet package project
        run: |
          # Create a class library project for the NuGet package
          dotnet new classlib -n Compsci399Grpc -o ./generated/csharp-package --force
          cd ./generated/csharp-package
          
          # Edit the project file to include necessary properties
          cat > Compsci399Grpc.csproj << EOF
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
              <ImplicitUsings>enable</ImplicitUsings>
              <Nullable>enable</Nullable>
              <PackageId>Compsci399Grpc</PackageId>
              <Version>1.0.2</Version>
              <Authors>gRPC Generator</Authors>
              <Company>COMPSCI399</Company>
              <Description>Auto-generated gRPC client stubs</Description>
              <PackageLicenseExpression>MIT</PackageLicenseExpression>
              <RepositoryUrl>https://github.com/capstone2025uoa/grpc</RepositoryUrl>
              <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
              <PackageListedStatus>Hidden</PackageListedStatus>
              <PackageReadmeFile>README.md</PackageReadmeFile>
            </PropertyGroup>
            <ItemGroup>
              <PackageReference Include="Google.Protobuf" Version="3.29.3" />
              <PackageReference Include="Grpc.Net.Client" Version="2.67.0" />
              <PackageReference Include="Grpc.Tools" Version="2.70.0" PrivateAssets="All" />
            </ItemGroup>
            <ItemGroup>
              <None Include="README.md" Pack="true" PackagePath="\" />
            </ItemGroup>
          </Project>
          EOF
          
          # Create README.md file
          cat > README.md << EOF
          # Compsci399Grpc

          This package contains auto-generated gRPC client stubs for use with the COMPSCI399 services.

          ## Installation

          ```bash
          dotnet add package Compsci399Grpc
          ```

          ## Usage

          ```csharp
          using Compsci399Grpc;
          using Grpc.Net.Client;

          // Create a gRPC channel
          using var channel = GrpcChannel.ForAddress("https://your-grpc-service-url");

          // Create a client for the specific service you want to use
          // Example for a Greeter service:
          var client = new Greeter.GreeterClient(channel);

          // Make requests to the service
          var reply = await client.SayHelloAsync(new HelloRequest { Name = "YourName" });
          Console.WriteLine($"Greeting: {reply.Message}");
          ```

          ## Available Services

          This package includes the following gRPC services:

          $(find ../csharp -name "*Grpc.cs" | xargs grep "public class" | sed 's/.*public class //g' | sed 's/ :.*//g' | sort | uniq | sed 's/^/- /g')

          ## Version History

          - 1.0.1: Current release
          - 1.0.0: Initial release

          ## License

          MIT
          EOF

      - name: Copy generated C# files to package project
        run: |
          # Copy all the generated .cs files to the package project
          cp ./generated/csharp/*.cs ./generated/csharp-package/
          
          # Remove Class1.cs that comes with the template
          rm -f ./generated/csharp-package/Class1.cs

      - name: Build and pack NuGet package
        run: |
          cd ./generated/csharp-package
          dotnet build -c Release
          dotnet pack -c Release -o ./nupkg

      - name: Publish NuGet package
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          cd ./generated/csharp-package/nupkg
          # Replace API_KEY with your actual NuGet API key stored in GitHub secrets
          dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      ##################################################
      # 6) COMMIT GENERATED FILES BACK TO REPO
      ##################################################
      - name: Commit generated files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update generated gRPC stubs [skip ci]"
          file_pattern: "generated/**"
